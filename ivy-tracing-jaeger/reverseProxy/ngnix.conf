load_module modules/ngx_http_opentracing_module.so;

events {}

http {
  # Enables the tracing  
  opentracing on;

  # Loads the tracing module and configures it with the given Jaeger config file
  opentracing_load_tracer /usr/local/lib/libjaegertracing_plugin.so /etc/jaeger-config.json;

  # redirect all http traffic to https
  server {
      server_name _;

      listen 80;
      listen [::]:80;

      return 301 https://$host$request_uri;
  }

  server {
    server_name localhost;

    location / {
      client_max_body_size 20m;
      client_body_buffer_size 128k;
      add_header X-Cache-Status $upstream_cache_status;
      add_header X-Frame-Options sameorigin; # defines which websites can include this site

      # proxy header settings
      proxy_set_header Connection "Upgrade";
      proxy_set_header Early-Data $ssl_early_data;
      proxy_set_header Host $host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Forwarded-Ssl on;
      proxy_set_header X-Real-IP $remote_addr;

      # proxy connection settings
      proxy_buffers 32 4k;
      proxy_connect_timeout 240;
      proxy_headers_hash_bucket_size 128;
      proxy_headers_hash_max_size 1024;
      proxy_http_version 1.1;
      proxy_read_timeout 240;
      proxy_redirect http:// $scheme://;
      proxy_send_timeout 240;

      # Propagates the tracing context to upstream services using the Jaeger specific http header 'uber-trace-id'  
      opentracing_propagate_context;
      
      proxy_pass http://ivy:8080/;
    }
  }
}
